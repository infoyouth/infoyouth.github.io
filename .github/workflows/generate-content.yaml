name: 🎓 Daily Course Generator
on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual content generation'
  schedule:
    - cron: '0 3 * * *'

permissions:
  contents: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

jobs:
  generate-content:
    name: 📚 Generate Course Content
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout Main Repository
        uses: actions/checkout@v3

      - name: 🔐 Checkout Private Content Repo
        uses: actions/checkout@v3
        with:
          repository: infoyouth/course-content-action
          ref: main
          token: ${{ secrets.PAT_TOKEN }}
          path: ./temp

      - name: 📦 Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-custom
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install transformers markdownify torch requests aiohttp python-dotenv tenacity colorlog

      - name: 🚀 Generate Course Content
        working-directory: ./temp
        run: |
          set -x
          pwd
          mkdir -p $GITHUB_WORKSPACE/_posts
          echo "🎯 Starting content generation process..."
          chmod a+x *.py
          # Run the Python script to generate content and set the TOPIC value in the script
          python3 todays_course_finder.py || { echo "Failed to generate content, exiting with error code"; exit 1; }
      
          # Initialize a flag for content generation
          CONTENT_GENERATED=false
      
          # Check if any .md files were generated
          if ls *.md 1> /dev/null 2>&1; then
            echo "📄 Found generated markdown files, copying them..."
            cp *.md $GITHUB_WORKSPACE/_posts
            CONTENT_GENERATED=true
          else
            echo "🚫 No content generated for today. Skipping file copy."
          fi
      
          # Export the CONTENT_GENERATED flag so it can be used in later steps
          echo "CONTENT_GENERATED=${CONTENT_GENERATED}" >> $GITHUB_ENV
      
          # Clean up
          cd ..
          rm -rf ./temp

      - name: Debug Environment Variables
        run: |
          echo "TOPIC=${TOPIC}"
          echo "CONTENT_GENERATED=${CONTENT_GENERATED}"
          echo "CURRENT_DATETIME=${CURRENT_DATETIME}"

      - name: 📋 Process Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Content generation completed successfully!"
          else
            echo "❌ Content generation encountered issues"
            exit 1
          fi
      
      - name: Create Branch Name and Set Date
        if: ${{ env.CONTENT_GENERATED == 'true' }}
        run: |
          CURRENT_DATETIME=$(date '+%Y-%m-%d')
          echo "CURRENT_DATETIME=${CURRENT_DATETIME}" >> $GITHUB_ENV
          BRANCH_NAME="${{ env.TOPIC }}-${CURRENT_DATETIME}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
      
      - name: Create Pull Request using action
        if: ${{ env.CONTENT_GENERATED == 'true' }}
        uses: peter-evans/create-pull-request@v7.0.5
        with:
          title: "Notes generated for ${{ env.TOPIC }} on ${{ env.CURRENT_DATETIME }}"
          body: "This PR contains generated notes on ${{ env.CURRENT_DATETIME }}."
          committer: "Youth Innovations <info.youthinno@gmail.com>"
          author: "Youth Innovations <info.youthinno@gmail.com>"
          assignees: "project-owner"
          base: main
          branch: ${{ env.BRANCH_NAME }}
          commit-message: "New blog post generated for ${{ env.TOPIC }} on ${{ env.CURRENT_DATETIME }}"
          token: ${{ secrets.GITHUB_TOKEN }}
