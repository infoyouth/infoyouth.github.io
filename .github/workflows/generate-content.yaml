# ⚡ Optimized Daily Course Generator with Fail-Fast Strategy
# 
# This workflow generates educational content based on scheduled topics.
# 
# 🎯 Optimization Strategy:
#   1. Pre-check job: Quickly checks if content is needed today (~10s)
#      - Uses sparse checkout (only clones data/ folder)
#      - Scans JSON files for today's date
#      - Exits early if no content scheduled (saves ~2-3 minutes)
#   2. Generate job: Only runs if pre-check finds content
#      - Receives topic from pre-check (no duplicate work)
#      - Full repo checkout and content generation
# 
# 📊 Performance:
#   - No content needed: ~10 seconds (vs ~3 minutes before)
#   - Content needed: ~3-4 minutes (same as before)
#   - Average savings: ~90% faster on non-generation days

name: 🎓 Daily Course Generator
on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual content generation'
  schedule:
    - cron: '0 1 * * *'

permissions:
  contents: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

jobs:
  # Pre-check job: Fast fail if no content needed today
  pre-check:
    name: 🔍 Check if Content Needed Today
    runs-on: ubuntu-24.04
    outputs:
      needs_generation: ${{ steps.check.outputs.needs_generation }}
      topic: ${{ steps.check.outputs.topic }}
      today: ${{ steps.check.outputs.today }}
    steps:
      - name: 📅 Check scheduled content for today
        id: check
        run: |
          TODAY=$(date '+%Y-%m-%d')
          echo "today=${TODAY}" >> $GITHUB_OUTPUT
          echo "📅 Checking for content scheduled on: ${TODAY}"
          
          # Sparse checkout only data/ folder (fast, ~2-3 seconds)
          echo "🔐 Cloning private repo (data folder only)..."
          git clone --depth 1 --filter=blob:none --sparse \
            https://${{ secrets.PAT_TOKEN }}@github.com/infoyouth/course-content-action.git temp
          cd temp
          git sparse-checkout set data/
          
          # Check all JSON files for today's date
          FOUND=false
          TOPIC_NAME=""
          
          echo "🔎 Scanning topic files..."
          for json_file in data/topics_and_prompts_*.json; do
            if [ -f "$json_file" ]; then
              FILENAME=$(basename "$json_file")
              echo "  → Checking ${FILENAME}..."
              
              # Check if today's date exists in this JSON file (capital "Date" field)
              if grep -qi "\"Date\": \"${TODAY}\"" "$json_file"; then
                # Extract topic name from filename
                TOPIC_NAME=$(basename "$json_file" | sed 's/topics_and_prompts_//;s/.json//')
                echo "✅ Found content for topic: ${TOPIC_NAME}"
                FOUND=true
                break
              fi
            fi
          done
          
          # Clean up
          cd ..
          rm -rf temp
          
          # Set outputs
          if [ "$FOUND" = true ]; then
            echo "needs_generation=true" >> $GITHUB_OUTPUT
            echo "topic=${TOPIC_NAME}" >> $GITHUB_OUTPUT
            echo "🎯 Content generation needed for: ${TOPIC_NAME}"
          else
            echo "needs_generation=false" >> $GITHUB_OUTPUT
            echo "🚫 No content scheduled for today (${TODAY})"
          fi

  generate-content:
    name: 📚 Generate Course Content
    needs: pre-check
    # Only run if pre-check found content for today
    if: needs.pre-check.outputs.needs_generation == 'true'
    runs-on: ubuntu-24.04
    env:
      TOPIC: ${{ needs.pre-check.outputs.topic }}
      TODAY: ${{ needs.pre-check.outputs.today }}
    steps:
      - name: 🔍 Checkout Main Repository
        uses: actions/checkout@v5

      - name: 🔐 Checkout Private Content Repo
        uses: actions/checkout@v5
        with:
          repository: infoyouth/course-content-action
          ref: main
          token: ${{ secrets.PAT_TOKEN }}
          path: ./temp

      - name: 📦 Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-custom
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: 📦 Install Pre Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiofiles==24.1.0 colorlog==6.9.0
          
      - name: 🚀 Generate Course Content for ${{ env.TOPIC }}
        working-directory: ./temp
        run: |
          export PYTHONPATH=$(pwd)
          export TOPIC="${{ env.TOPIC }}"
          echo "🎯 Generating content for: ${TOPIC} (${GITHUB_WORKSPACE})"
          
          # Run the Python script to generate content
          python3 todays_course_finder.py || { 
            echo "❌ Failed to generate content"
            exit 1
          }
      
          # Initialize a flag for content generation
          CONTENT_GENERATED=false
      
          # Check if any .md files were generated, excluding README.md
          if ls *.md 2>/dev/null | grep -v '^README.md$' > /dev/null; then
            echo "📄 Found generated markdown files (excluding README.md), copying them..."
            
            # Map TOPIC to folder name (lowercase with hyphens)
            TOPIC_FOLDER=$(echo "${TOPIC}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
            TARGET_DIR="$GITHUB_WORKSPACE/_posts/${TOPIC_FOLDER}"
            
            # Create topic folder if it doesn't exist
            mkdir -p "${TARGET_DIR}"
            
            # Copy files to the topic-specific folder
            ls *.md | grep -v '^README.md$' | xargs -I {} cp {} "${TARGET_DIR}/"
            echo "✅ Copied posts to _posts/${TOPIC_FOLDER}/"
            
            CONTENT_GENERATED=true
          else
            echo "🚫 No content generated for today. Skipping file copy."
          fi
      
          # Export the CONTENT_GENERATED flag so it can be used in later steps
          echo "CONTENT_GENERATED=${CONTENT_GENERATED}" >> $GITHUB_ENV
      
          # Clean up
          cd ..
          rm -rf ./temp

      - name: 📋 Process Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Content generation completed successfully!"
          else
            echo "❌ Content generation encountered issues"
            exit 1
          fi
      
      - name: Create Branch Name and Set Date
        id: set_pr_vars
        if: env.CONTENT_GENERATED == 'true'
        run: |
          CURRENT_DATETIME="${{ env.TODAY }}"
          echo "current_datetime=${CURRENT_DATETIME}" >> $GITHUB_OUTPUT
          
          BRANCH_NAME="${{ env.TOPIC }}-${CURRENT_DATETIME}"
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          
          TOPIC_WITH_SPACE=$(echo "${{ env.TOPIC }}" | sed 's/_/ /g' | sed 's/-/ /g')
          echo "topic_with_space=${TOPIC_WITH_SPACE}" >> $GITHUB_OUTPUT
      
      - name: 🚀 Open Pull Request
        if: env.CONTENT_GENERATED == 'true'
        id: create_pull_request
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          title: "📝 ${{ steps.set_pr_vars.outputs.topic_with_space }} - Comprehensive Notes with New Insights (${{ steps.set_pr_vars.outputs.current_datetime }}) 📥"
          body: "This PR includes generated notes created on ${{ steps.set_pr_vars.outputs.current_datetime }}."
          committer: "Youth Innovations <info.youthinno@gmail.com>"
          author: "Youth Innovations <info.youthinno@gmail.com>"
          assignees: "project-owner"
          reviewers: DarshanBoraganve,Sanmatiboragave,shweta-borganve
          base: main
          branch: ${{ steps.set_pr_vars.outputs.branch_name }}
          labels: blog-post
          commit-message: "📝 Freshly Generated Course Content for '${{ steps.set_pr_vars.outputs.topic_with_space }}' on ${{ steps.set_pr_vars.outputs.current_datetime }} 📚✨ | Ready to Dive In!"
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Debug Outputs
        if: env.CONTENT_GENERATED == 'true'
        run: |
          echo "Pull Request Branch: ${{ steps.create_pull_request.outputs.pull-request-branch }}"
          echo "Pull Request Operation: ${{ steps.create_pull_request.outputs.pull-request-operation }}"
          echo "Pull Request Head SHA: ${{ steps.create_pull_request.outputs.pull-request-head-sha }}"
          echo "Pull Request Number: ${{ steps.create_pull_request.outputs.pull-request-number }}"
          echo "Pull Request URL: ${{ steps.create_pull_request.outputs.pull-request-url }}"
          
      - name: 🚨 Notify Discord
        if: env.CONTENT_GENERATED == 'true' && steps.create_pull_request.outputs.pull-request-operation == 'created'
        uses: cabrera-evil/discord-notify-action@v1.0.2
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: '📢 ** ${{ env.TOPIC }} **'
          description: |
            🎉 **New PR Alert!** 🚀
            
            📝 **Topic:** ${{ steps.set_pr_vars.outputs.topic_with_space }}
            
            📅 **Date:** ${{ steps.set_pr_vars.outputs.current_datetime }}
            
            🔖 **Branch:** ${{ steps.create_pull_request.outputs.pull-request-branch }}
            
            🔢 **PR Number:** ${{ steps.create_pull_request.outputs.pull-request-number }}
            
            🔗 **View PR:** [Click here](${{ steps.create_pull_request.outputs.pull-request-url }})
            
            💬 Review, share feedback, and help improve open-source! 🌐 
          include_image: 'true'
          username: 'Youth Innovations'
          custom_image_url: 'https://raw.githubusercontent.com/infoyouth/infoyouth.github.io/main/assets/img/favicons/favicon-48x48.png'
          repo_name: ${{ github.repository }}
          repo_url: ${{ github.server_url }}/${{ github.repository }}
